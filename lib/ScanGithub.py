import requests
import calendar
from datetime import datetime
import json, time, re
import lib.MyLog as MyLog
import lib.RunSQL as RunSQL
import lib.CveFilter as CveFilter
import lib.SearchCVE as SearchCVE





class ScanGitHubCVE:
    def __init__(self, path):
        self.path = path
        self.year = time.strftime("%Y", time.localtime(time.time()))
        return

    # 得到所有cve信息
    def _getNewsAll(self):
        try:
            api = "https://api.github.com/search/repositories?q=CVE-{}&sort=updated".format(self.year)
            response = requests.get(api).text
            data = json.loads(response)
            if data['total_count'] >= 0:
                MyLog.log('Github总数量：'+format(data['total_count']))
            return data
        except Exception as e:
            MyLog.log("Error FLAG lib.ScanGithub._getNewsAll: "+format(e))
            exit(1)

    # 得到增量cve信息
    @property
    def getAddNews(self):
        now_time = datetime.now()
        data = self._getNewsAll()
        i = 0
        content = ""  # 待发送内容
        for item in  data['items']:
            isfork = item['fork']
            git_name = item['name']
            git_url = item['svn_url']
            git_des = item['description'] if item['description'] else "Null"
            update_time = item['updated_at']
            repo_size = item['size']

            cve_name = "未知编号"
            if len(re.findall('(?i)cve-202\d-\d*', git_name.lower().replace('‐', '-').replace('_', '-'))) > 0:
                cve_name = re.findall('(?i)cve-202\d-\d*', git_name.lower().replace('‐', '-').replace('_', '-'))[0]
                # 提取git描述中的cve编号，匹配第一个
            else:
                if len(re.findall('(?i)cve-202\d-\d*', git_des.lower().replace('‐', '-').replace('_', '-'))) > 0:
                    cve_name = re.findall('(?i)cve-202\d-\d*', git_des.lower().replace('‐', '-').replace('_', '-'))[0]


            #过滤20分钟前更新的项目
            git_time = datetime.strptime(str(update_time), "%Y-%m-%dT%H:%M:%SZ")
            timestamp = time.time()

            recent = (int(timestamp) - int(calendar.timegm(git_time.timetuple())))/60

            if recent > 15:
                continue

            # 已入库的不进行后续流程

            #print(recent,git_time,now_time)
            if self.checkExists(git_name, git_url):
                continue

            #fork的不进行后续流程
            # print(item)
            if isfork is True:
                RunSQL.insertValue(cve_name, git_name, git_url, git_des, 'adc83b19e793491b1c6ea0fd8b46cd9f32e592fc', '0')
                continue


            # 最近20分钟内更新的计算hash
            contents = self.getContents(item['contents_url'].replace('{+path}',''))
            readme_hash = contents[0]
            file_count = contents[1]
            readme_size = contents[2]
            readme_content = contents[3]


            filter_result = CveFilter.filter(cve_name,git_name,git_url,git_des,readme_hash,file_count,readme_size,readme_content)

            if not filter_result:
                continue

            RunSQL.insertValue(cve_name,git_name,git_url,git_des,readme_hash,'1')
            # 获取cve漏洞cvss和说明
            if cve_name == "":
                cve_cvss, cve_des = "", ""
            else:
                cve_cvss, cve_des = SearchCVE.SearchCVE(cve_name).run()

            if self.checkFirst(cve_name):
                content += "\n******************************************\n*                           新漏洞                              *\n******************************************"
            content += "\n[{}] 项目名称：{}\n[{}] 项目地址：{}\n[{}] 项目描述: {}\n[{}] CVE编号：{}\n[{}] CVSS等级：{}\n[{}] CVE说明：{}\n".format(
                i, git_name, i, git_url, i, git_des, i, cve_name.upper(), i, cve_cvss, i, cve_des)
            i = i + 1
        if content != '':
            content = "【CVE新增监控告警通知:】" + content
        return content




    def getContents(self,contents_url):
        response = ''
        try:
            response = requests.get(contents_url).text

            if 'This repository is empty' in response:
                readme_hash = ''
                readme_size = 0
                file_count = 0
                return [readme_hash, file_count, readme_size,response]
            data = json.loads(response)
            #print(data)
            readme_hash = ''
            file_count = len(data)
            readme_size = 0
            readme_content = ''

            for item in data:
                if item['name'].lower() == 'readme.md':
                    readme_hash = item['sha']
                    readme_size = item['size']
                    download_url = item['download_url']
                    try:
                        readme_content = requests.get(download_url).text
                    except:
                        readme_content = ''

        except Exception as e:
            MyLog.log("Error FLAG lib.ScanGithub.getContents: " + format(e))
            readme_hash = ''
            readme_content = ''
            readme_size = 0
            file_count = 2
        return [readme_hash, file_count, readme_size,readme_content]



    def checkExists(self,git_name,git_url):
        result = RunSQL.run("SELECT * FROM Monitor WHERE gitname = '%s' and giturl = '%s' and status = '1'"%(git_name,git_url))
        if len(result) == 0:
            return False
        return True

    def checkFirst(self,cve_name):
        sql = "SELECT * FROM monitor WHERE cve = '%s' and status = '1'"%(cve_name)
        if len(RunSQL.run(sql)) == 1:
            return True
        return False
