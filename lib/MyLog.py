import datetime
import os
import logging
import colorlog


class Logger:
    def __init__(self, path=os.path.dirname(os.path.abspath(__file__))+"/../log/log", clevel=logging.DEBUG, Flevel=logging.DEBUG):
        log_colors_config = {
            'DEBUG': 'white',
            'INFO': 'cyan',
            'WARNING': 'yellow',
            'ERROR': 'red',
            'CRITICAL': 'bold_red',
        }
        self.logger = logging.getLogger(path)
        self.logger.setLevel(logging.DEBUG)
        self.logger.propagate = False
        fmt = logging.Formatter('[%(asctime)s] [%(levelname)s] [%(filename)s->%(funcName)s %(lineno)d] %(message)s', '%Y-%m-%d %H:%M:%S')
        cfmt = colorlog.ColoredFormatter('%(log_color)s[%(asctime)s] [%(levelname)s] [%(filename)s->%(funcName)s %(lineno)d] %(message)s',datefmt='%Y-%m-%d %H:%M:%S',log_colors=log_colors_config)
        if not self.logger.handlers:
            # 设置CMD日志
            sh = logging.StreamHandler()
            sh.setFormatter(cfmt)
            sh.setLevel(clevel)
            # 设置文件日志
            fh = logging.FileHandler(path)
            fh.setFormatter(cfmt)
            fh.setLevel(Flevel)
            self.logger.addHandler(sh)
            self.logger.addHandler(fh)


def log(content):
    text = str(content)
    syspath = os.path.dirname(os.path.abspath(__file__))
    f = open(syspath+"/../../log/log",'a+')
    result = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')+'\t'+text+'\n'
    print(result,end='')
    f.write(result)
    f.close()