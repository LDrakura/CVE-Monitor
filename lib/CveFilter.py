import lib.RunSQL as RunSQL


def filter(cve_name,git_name,git_url,git_des,readme_hash,file_count,readme_size):


    # 如果项目为空 暂时不报
    if file_count == 0 and type(file_count) == int:
        RunSQL.insertValue(cve_name, git_name, git_url, git_des, 'emptyadc83b19e793491b1c6ea0fd8b46cd9f32e592fc', '0')
        return False
    # 如果Readme过小,且只有reademe说明可能是垃圾项目
    if readme_size < 300 and file_count == 1 and type(readme_size) == int and type(file_count) == int:
        RunSQL.insertValue(cve_name, git_name, git_url, git_des, 'readmesimple83b19e793491b1c6ea0fd8b46cd9f32e592fc', '0')
        return False

    # 如果readme存在说明是复制过来的垃圾项目
    if readme_hash != '' and  len(RunSQL.run("SELECT * FROM monitor WHERE status = '1' and hash = '%s'"%(readme_hash))) > 1:
        RunSQL.insertValue(cve_name, git_name, git_url, git_des, 'existhash'+ readme_hash, '0')
        return False

    # 触发黑名单
    for black in RunSQL.run('SELECT * FROM black'):
        db_cve_name = black[3]
        db_git_des = black[2]
        db_git_url = black[1]
        if str(db_cve_name) in cve_name or str(db_git_des) in git_des or str(db_git_url) in git_url:
            RunSQL.insertValue(cve_name, git_name, git_url, git_des, 'blackadc83b19e793491b1c6ea0fd8b46cd9f32e592fc', '0')
            return False
    #cve相关的repo数量超过15个就忽略
    repo_num = RunSQL.run("SELECT COUNT(1) FROM monitor WHERE `cve` = '%s' and status = '1'"%(cve_name))[0][0]
    if int(repo_num) > 10:
        RunSQL.insertValue(cve_name, git_name, git_url, git_des, 'morethan1583b19e793491b1c6ea0fd8b46cd9f32e592fc', '0')
        return False
    return True





